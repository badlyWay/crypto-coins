{"version":3,"file":"static/js/170.755b9944.chunk.js","mappings":"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","sources":["components/Button/Button.tsx","components/Preloaders/ExchangesTabelPreloader.tsx","components/ExchangesTable/ExchangesTableRow.tsx","components/ExchangesTable/ExchangesTable.tsx","api/exchanges.ts","containers/Exchanges/Exchanges.tsx","hooks/store.ts"],"sourcesContent":["import React from 'react'\r\n\r\ninterface IButtonProps {\r\n    children: JSX.Element | string | JSX.Element[],\r\n    clickHandler: () => void,\r\n}\r\n\r\nconst Button: React.FC<IButtonProps> = ({ children, clickHandler }) => {\r\n    return (\r\n        <button\r\n            onClick={clickHandler}\r\n            className='p-4 capitalize text-center dark:shadow-none transition-all rounded-full shadow-lg shadow-primary-300 hover:shadow-accent-300 dark:bg-bg-100 hover:dark:bg-accent-200 active:scale-95 active:shadow-primary-300  sm:p-3'>\r\n            {children}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default Button","import React from 'react'\r\nimport { COIN_EXCHANGES_LIMIT } from '../../constans/values'\r\n\r\nconst ExchangesTabelPreloader: React.FC = () => {\r\n    return (\r\n        <div className='animate-pulse'>\r\n            {Array.from({ length: COIN_EXCHANGES_LIMIT }).map((item, index) =>\r\n                <div key={index} className='h-12 md:h-10 sm:h-9 w-full bg-accent-100 my-1 dark:bg-bg-200' />\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ExchangesTabelPreloader;","import React from 'react';\r\nimport { IExchange } from '../../types/exchanges';\r\nimport { numberAug, priceFormater } from '../../utils/stringParser';\r\n\r\ninterface IExchangesTableRow {\r\n    exchange: IExchange,\r\n}\r\n\r\nconst ExchangesTableRow: React.FC<IExchangesTableRow> = ({\r\n    exchange: { exchangeUrl,\r\n        name,\r\n        rank,\r\n        percentTotalVolume,\r\n        volumeUsd,\r\n        tradingPairs, }\r\n}) => {\r\n\r\n    const exchangeRowClickHandler = () => {\r\n        window.open(exchangeUrl, '_blank');\r\n    }\r\n\r\n    return (\r\n        <tr className='cursor-pointer transition-all hover:scale-105 hover:shadow-lg active:scale-100 dark:bg-bg-200 hover:dark:bg-bg-100 border-b border-primary-300 dark:border-bg-300 hover:border-transparent' onClick={exchangeRowClickHandler}\r\n        >\r\n            <td className='text-start p-4 md:p-3 md:hidden'>{rank}</td>\r\n            <td className='text-start p-4 md:p-3 sm:text-sm sm:p-2'>{name}</td>\r\n            <td className='text-end p-4 md:p-3 sm:text-sm sm:p-2'>{tradingPairs}</td>\r\n            <td className='text-end p-4 md:p-3 sm:text-sm sm:p-2'>${priceFormater(volumeUsd)}</td>\r\n            <td className='text-end p-4 md:p-3 md:hidden'>{numberAug(percentTotalVolume)}%</td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default ExchangesTableRow","import React from 'react';\r\nimport { IExchange } from '../../types/exchanges';\r\nimport ExchangesTableRow from './ExchangesTableRow';\r\n\r\ninterface IExchangesTable {\r\n    exchanges: IExchange[],\r\n}\r\n\r\nconst ExchangesTable: React.FC<IExchangesTable> = ({ exchanges }) => {\r\n    const renderExchangeRows = (list: IExchange[]) => list.map(item =>\r\n        <ExchangesTableRow key={item.exchangeId} exchange={item} />\r\n    )\r\n\r\n    return (\r\n        <table className=\"table-auto w-full mx-auto relative border-collapse\">\r\n            <thead className='bg-accent-100 dark:bg-bg-300 sticky top-0'>\r\n                <tr className=''>\r\n                    <th className='text-start p-4 md:hidden'>Rank</th>\r\n                    <th className='text-start p-4 sm:text-sm sm:p-2'>Name</th>\r\n                    <th className='text-end p-4 sm:text-sm sm:p-2'>Tranding Pairs</th>\r\n                    <th className='text-end p-4 sm:text-sm sm:p-2'>Volume(24Hr)</th>\r\n                    <th className='text-end p-4 md:hidden'>Total(%)</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {renderExchangeRows(exchanges)}\r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\n\r\nexport default ExchangesTable","import axios from \"axios\";\r\nimport { AppDispatch } from \"../store\";\r\nimport { COIN_API, COIN_EXCHANGES_LIMIT } from \"../constans/values\";\r\nimport { getExchangeDetailsFailure, getExchangeDetailsPending, getExchangeDetailsSuccess, getExchangesFailure, getExchangesPending, getExchangesSuccess } from \"../store/reducers/exchangesSlice\";\r\nimport { IExchangeResponse, IExchangesRequest, IExchangesResponse } from \"../types/exchanges\";\r\n\r\nexport const fetchExchagnes = ({ limit = COIN_EXCHANGES_LIMIT, offset }: IExchangesRequest) => async (dispatch: AppDispatch) => {\r\n    try {\r\n        dispatch(getExchangesPending())\r\n        const { data } = await axios.get<IExchangesResponse>(`${COIN_API}/exchanges?limit=${limit}&offset=${offset}`);\r\n        dispatch(getExchangesSuccess(data.data));\r\n    } catch (error: any) {\r\n        dispatch(getExchangesFailure(error));\r\n    }\r\n}\r\nexport const fetchExchagnesDetails = (id: string) => async (dispatch: AppDispatch) => {\r\n    try {\r\n        dispatch(getExchangeDetailsPending());\r\n        const { data } = await axios.get<IExchangeResponse>(`${COIN_API}/exchanges/${id}`);\r\n        dispatch(getExchangeDetailsSuccess(data.data));\r\n    } catch (error: any) {\r\n        dispatch(getExchangeDetailsFailure(error));\r\n    }\r\n}\r\n\r\n\r\n","import React, { useEffect, useState } from 'react'\r\nimport ExchangesTable from '../../components/ExchangesTable/ExchangesTable'\r\nimport { COIN_EXCHANGES_LIMIT, COIN_EXCHANGES_OFFSET } from '../../constans/values';\r\nimport { useAppDispatch, useAppSelector } from '../../hooks/store';\r\nimport { fetchExchagnes } from '../../api/exchanges';\r\nimport { resetExchangesState } from '../../store/reducers/exchangesSlice';\r\nimport ExchangesTabelPreloader from '../../components/Preloaders/ExchangesTabelPreloader';\r\nimport Button from '../../components/Button';\r\n\r\nconst Exchanges: React.FC = () => {\r\n    const [offset, setOffset] = useState<number>(COIN_EXCHANGES_OFFSET);\r\n    const { list, isEndList, isLoading } = useAppSelector(state => state.exchanges)\r\n    const dispatch = useAppDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchExchagnes({\r\n            limit: COIN_EXCHANGES_LIMIT,\r\n            offset: COIN_EXCHANGES_OFFSET,\r\n        }))\r\n\r\n        return () => {\r\n            dispatch(resetExchangesState())\r\n        }\r\n    }, [])\r\n\r\n    const loadButtonClickHandler = () => {\r\n        const newOffset = offset + COIN_EXCHANGES_LIMIT;\r\n        dispatch(fetchExchagnes({ offset: newOffset }));\r\n        setOffset(newOffset);\r\n    }\r\n\r\n    return (\r\n        <div className='container'>\r\n            <ExchangesTable exchanges={list} />\r\n            {isLoading && <ExchangesTabelPreloader />}\r\n            {isEndList ||\r\n                <div className=\"flex items-center justify-center my-4\">\r\n                    <Button\r\n                        clickHandler={loadButtonClickHandler}\r\n                    >\r\n                        load more\r\n                    </Button>\r\n                </div>\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Exchanges","import { useDispatch, useSelector } from 'react-redux'\r\nimport type { TypedUseSelectorHook } from 'react-redux'\r\nimport type { RootState, AppDispatch } from '../store'\r\n\r\nexport const useAppDispatch: () => AppDispatch = useDispatch\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector"],"names":["_ref","children","clickHandler","_jsx","onClick","className","Array","from","length","COIN_EXCHANGES_LIMIT","map","item","index","_ref$exchange","exchange","exchangeUrl","name","rank","percentTotalVolume","volumeUsd","tradingPairs","_jsxs","window","open","priceFormater","numberAug","list","exchanges","ExchangesTableRow","exchangeId","fetchExchagnes","_ref$limit","limit","offset","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","dispatch","_yield$axios$get","data","wrap","_context","prev","next","getExchangesPending","axios","get","concat","COIN_API","sent","getExchangesSuccess","t0","getExchangesFailure","stop","_x","apply","arguments","_useState","useState","COIN_EXCHANGES_OFFSET","_useState2","_slicedToArray","setOffset","_useAppSelector","useAppSelector","state","isEndList","isLoading","useAppDispatch","useEffect","resetExchangesState","ExchangesTable","ExchangesTabelPreloader","Button","newOffset","useDispatch","useSelector"],"sourceRoot":""}